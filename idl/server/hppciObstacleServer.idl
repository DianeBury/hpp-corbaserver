/*
  Research carried out within the scope of the Associated International Laboratory: Joint Japanese-French Robotics Laboratory (JRL)

  Developed by Florent Lamiraux (LAAS-CNRS)

*/

#ifndef HPPCI_OBSTACLE_SERVER_IDL
#define HPPCI_OBSTACLE_SERVER_IDL

/**
 * \brief Sequence of string
 */
typedef sequence<string> strSeq;

typedef double Translation[3];
typedef double Rotation[9];
struct Configuration{
  Translation trs;
  Rotation rot;
};

/**
 * \brief Creation of obstacles
 *

There are two ways to insert a list of obstacles in the ChppPlanner object of the Corba interface. 
\li The first way consists in doing the following operations:
   -# creating an empty list of CkcdObject (createCollisionList), 
   -# creating an empty polyhedron (createPolyhedron), 
   -# adding vertices (addPoint) and facets (addTriangle) to the polyhedron,
   -# including the polyhedron to the list of CkcdObject (addPolyToCollList)
   -# setting the list of CkcdObject built as the collision list (setObstacles),
and repeat these operation for each polyhedron obstacle.
\li the second way consists in building polyhedra one by one as described above and to insert them in the collision list (addObstacle).

\note Polyhedra and lists of CkcdObject in construction are stored in local std::map of object ChppciObstacle_impl. Therefore once a list of CkcdObject has been stored in object ChppPlanner through function ChppciObstacle_impl::setObstacles or a polyhedron has been added to list of CkcdObject ChppPlanner through function ChppciObstacle_impl::addObstacle, they should not be modified.
 */
interface ChppciObstacle {
  /**
   * \brief Set a KineoWorks list of CkcdObject as the set of obstacles of object ChppPlanner ChppciServer::hppPlanner.
   * \param inListName name of the list of CkcdObject.
   * \return 0 if success, -1 if failure.
   */
  short setObstacles(in string inListName);
  /**
   * \brief Add an obstacle to the set of obstacles of object ChppPlanner ChppciServer::hppPlanner.
   * \param inPolyName name of the polyhedron.
   * \return 0 if success, -1 if failure.
   * \note The obstacle is not added to local map ChppciObstacle_impl::collisionListMap.
   * \note Build the collision entity of polyhedron for KCD.
   */
  short addObstacle(in string inPolyName);

  /**
   * \brief Add an obstacle with given configuration to the set of obstacles of object ChppPlanner ChppciServer::hppPlanner
   * \param inPolyName name of the polyhedron.
   * \param cfg the configuration of the obstacle.
   * \return 0 if success, -1 if failure.
   * \note The obstacle is not added to local map ChppciObstacle_impl::collisionListMap.
   * \note Build the collision entity of polyhedron for KCD.
   */
  short addObstacleConfig(in string inPolyName, in Configuration cfg);

  /**
   * \brief Move an obstacle to a given configuration.
   * \param inPolyName name of the polyhedron.
   * \param cfg the configuration of the obstacle.
   * \return 0 if success, -1 if failure.
   * \note The obstacle is not added to local map ChppciObstacle_impl::collisionListMap.
   * \note Build the collision entity of polyhedron for KCD.
   */
  short moveObstacleConfig(in string inPolyName, in Configuration cfg);

  /* 
   *   Lists of CkcdObject
   */
  
  /**
   * \brief Create an empty list of CkcdObject with given name.
   *\return 0 if success, -1 if failure.
   */
  short createCollisionList(in string inListName);
  /**
   * \brief Add a polyhedron to a list of CkcdObject.
   * \param inListName name of the list.
   * \param inPolyName name of the polyhedron.
   * \return 0 if success, -1 if failure.
   *
   * \note Build the collision entity of polyhedron for KCD.
   */
  short addPolyToCollList(in string inListName, in string inPolyName);


  /* 
   *   Polyhedra
   */

  /**
   * \brief create an empty polyhedron.
   * \param inPolyName name of the polyhedron.
   * \return 0 if success, -1 if failure.
   */
  short createPolyhedron(in string inPolyName);
  /**
     \brief Create a box
     \param inBoxName name of the box
     \param x, y, z Size of the box
  */
  short createBox(in string inBoxName, in double x, in double y, in double z);
  /**
   * \brief Add a point to a polyhedron
   * \param inPolyName the name of the polyhedron.
   * \param x coordinate of the point. 
   * \param y coordinate of the point. 
   * \param z coordinate of the point. 
   * \return rank of point in polyhedron or -1 if failure.
   */
  short addPoint(in string inPolyName, in double x, in double y, in double z);
  /**
   * \brief Add a point to a polyhedron
   * \param inPolyName the name of the polyhedron.
   * \param pt1 rank of first point in polyhedron. 
   * \param pt2 rank of second point in polyhedron. 
   * \param pt3 rank of third point in polyhedron. 
   * \return rank of triangle in polyhedron or -1 if failure.
   */
  short addTriangle(in string inPolyName, in long pt1, in long pt2, in long pt3);

};

#endif
