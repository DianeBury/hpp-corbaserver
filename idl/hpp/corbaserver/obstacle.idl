// Copyright (C) 2009, 2010 by Florent Lamiraux, Thomas Moulard, JRL.
//
// This file is part of the hpp-corbaserver.
//
// This software is provided "as is" without warranty of any kind,
// either expressed or implied, including but not limited to the
// implied warranties of fitness for a particular purpose.
//
// See the COPYING file for more information.

#ifndef HPP_CORBASERVER_OBSTACLE_SERVER_IDL
# define HPP_CORBASERVER_OBSTACLE_SERVER_IDL
# include <hpp/corbaserver/common.idl>

module hpp
{
  /// \brief Obstacles management.
  ///
  /// There are two ways to insert a list of obstacles in the
  /// ChppPlanner object of the Corba interface.
  ///
  /// \li The first way consists in doing the following operations:
  /// -# creating an empty list of CkcdObject (createCollisionList),
  /// -# creating an empty polyhedron (createPolyhedron),
  /// -# adding vertices (addPoint) and facets (addTriangle) to the polyhedron,
  /// -# including the polyhedron to the list of CkcdObject (addPolyToCollList)
  /// -# setting the list of CkcdObject built as the collision list
  ///    (setObstacles),
  ///
  /// ...and repeat these operation for each polyhedron obstacle.
  ///
  /// \li the second way consists in building polyhedra one by one as
  /// described above and to insert them in the collision list
  /// (addObstacle).
  ///
  /// \note Polyhedra and lists of CkcdObject in construction are
  /// stored in local std::map of objects in impl::Obstacle.
  interface Obstacle
  {
    /// \brief Set a KineoWorks list of CkcdObject as the set of
    /// obstacles of object ChppPlanner Server::hppPlanner.
    ///
    /// \param inListName name of the list of CkcdObject.
    /// \return 0 if success, -1 if failure.
    short setObstacles (in string inListName);

    /// \brief Add an obstacle to the set of obstacles of object
    ///        ChppPlanner Server::hppPlanner.
    ///
    /// \param inPolyName name of the polyhedron.
    /// \return 0 if success, -1 if failure.
    ///
    /// \note The obstacle is not added to local map
    /// impl::Obstacle::collisionListMap.
    ///
    /// \note Build the collision entity of polyhedron for KCD.
    short addObstacle (in string inPolyName);

    /// \brief Add an obstacle with given configuration to the set of
    /// obstacles of object ChppPlanner Server::planner_
    ///
    /// \param inPolyName name of the polyhedron.
    /// \param cfg the configuration of the obstacle.
    /// \return 0 if success, -1 if failure.
    ///
    /// \note The obstacle is not added to local map
    /// impl::Obstacle::collisionListMap.
    ///
    /// \note Build the collision entity of polyhedron for KCD.
    short addObstacleConfig (in string inPolyName, in Configuration cfg);

    /// \brief Move an obstacle to a given configuration.
    /// \param inPolyName name of the polyhedron.
    /// \param cfg the configuration of the obstacle.
    /// \return 0 if success, -1 if failure.
    ///
    /// \note The obstacle is not added to local map
    /// impl::Obstacle::collisionListMap.
    ///
    /// \note Build the collision entity of polyhedron for KCD.
    short moveObstacleConfig (in string inPolyName, in Configuration cfg);

    /// \name Lists of CkcdObject
    /// \{

    /// \brief Create an empty list of CkcdObject with given name.
    ///
    /// \return 0 if success, -1 if failure.
    short createCollisionList (in string inListName);

    /// \brief Add a polyhedron to a list of CkcdObject.
    /// \param inListName name of the list.
    /// \param inPolyName name of the polyhedron.
    /// \return 0 if success, -1 if failure.
    /// \note Build the collision entity of polyhedron for KCD.
    short addPolyToCollList (in string inListName, in string inPolyName);

    /// \}

    /// \name Polyhedra
    /// \{

    /// \brief create an empty polyhedron.
    /// \param inPolyName name of the polyhedron.
    /// \return 0 if success, -1 if failure.
    short createPolyhedron (in string inPolyName);

    /// \brief Create a box
    /// \param inBoxName name of the box
    /// \param x, y, z Size of the box
    short createBox
    (in string inBoxName, in double x, in double y, in double z);

    /// \brief Add a point to a polyhedron
    /// \param inPolyName the name of the polyhedron.
    /// \param x coordinate of the point.
    /// \param y coordinate of the point.
    /// \param z coordinate of the point.
    /// \return rank of point in polyhedron or -1 if failure.
    short addPoint
    (in string inPolyName, in double x, in double y, in double z);

    /// \brief Add a point to a polyhedron
    /// \param inPolyName the name of the polyhedron.
    /// \param pt1 rank of first point in polyhedron.
    /// \param pt2 rank of second point in polyhedron.
    /// \param pt3 rank of third point in polyhedron.
    /// \return rank of triangle in polyhedron or -1 if failure.
    short addTriangle
    (in string inPolyName, in unsigned long pt1,
     in unsigned long pt2, in unsigned long pt3);

    /// \}

    /// \name Graphical properties
    /// \{

    /// \brief Set whether an object is visible
    ///
    /// \param inPolyname Name of the object.
    /// \param inVisible whether it should be visible.
    /// \return 0 if success, -1 if failure.
    ///
    /// \note The object should have been created by this object.
    short setVisible (in string inPolyname, in boolean inVisible);

    /// \brief Set whether an object is transparent
    ///
    /// \param inPolyname Name of the object.
    /// \param inTransparent whether it should be transparent.
    /// \return 0 if success, -1 if failure.
    ///
    /// \note The object should have been created by this object.
    short setTransparent (in string inPolyname, in boolean inTransparent);

    /// \}
  };
};

#endif //! HPP_CORBASERVER_OBSTACLE_SERVER_IDL
