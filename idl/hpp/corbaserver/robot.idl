// Copyright (C) 2009, 2010, 2011, 2012, 1013, 2014 CNRS
// Authors:  Florent Lamiraux, Thomas Moulard.
//
// This file is part of the hpp-corbaserver.
//
// This software is provided "as is" without warranty of any kind,
// either expressed or implied, including but not limited to the
// implied warranties of fitness for a particular purpose.
//
// See the COPYING file for more information.

#ifndef HPP_CORBASERVER_ROBOT_SERVER_IDL
# define HPP_CORBASERVER_ROBOT_SERVER_IDL
# include <hpp/corbaserver/common.idl>

module hpp
{
  module corbaserver {
  /// Creation of a device, joints and bodies.
  interface Robot {
    ///  Load robot model
    ///
    /// \param robotName Name of the robot that is constructed,
    /// \param rootJointType type of root joint among "anchor", "freeflyer",
    /// "planar",
    /// \param packageName Name of the ROS package containing the model,
    /// \param modelName Name of the package containing the model
    /// \param urdfSuffix suffix for urdf file,
    ///
    /// The ros url are built as follows:
    /// "package://${packageName}/urdf/${modelName}${urdfSuffix}.urdf"
    /// "package://${packageName}/srdf/${modelName}${srdfSuffix}.srdf"
    ///
    void loadRobotModel (in string robotName, in string rootJointType,
			 in string packageName, in string modelName,
			 in string urdfSuffix, in string srdfSuffix)
      raises (Error);

    ///  Load humanoid robot model
    ///
    /// \param robotName Name of the robot that is constructed,
    /// \param rootJointType type of root joint among "anchor", "freeflyer",
    /// "planar",
    /// \param packageName Name of the ROS package containing the model,
    /// \param modelName Name of the package containing the model
    /// \param urdfSuffix suffix for urdf file,
    ///
    /// The ros url are built as follows:
    /// "package://${packageName}/urdf/${modelName}${urdfSuffix}.urdf"
    /// "package://${packageName}/srdf/${modelName}${srdfSuffix}.srdf"
    ///
    void loadHumanoidModel (in string robotName, in string rootJointType,
			    in string packageName, in string modelName,
			    in string urdfSuffix, in string srdfSuffix)
      raises (Error);

    ///  Load robot model
    ///
    /// \param robotName Name of the robot that is constructed,
    /// \param rootJointType type of root joint among "anchor", "freeflyer",
    /// "planar",
    /// \param urdfString urdf string,
    /// \param srdfString srdf string.
    ///
    void loadRobotModelFromString (in string robotName, in string rootJointType,
                                   in string urdfString, in string srdfString)
      raises (Error);

    ///  Load humanoid robot model
    ///
    /// \param robotName Name of the robot that is constructed,
    /// \param rootJointType type of root joint among "anchor", "freeflyer",
    /// "planar",
    /// \param urdfString urdf string,
    /// \param srdfString srdf string.
    ///
    void loadHumanoidModelFromString (in string robotName, in string rootJointType,
			              in string urdfString, in string srdfString)
      raises (Error);

    /// \}

    /// \name Degrees of freedom
    /// \{

    /// Get size of configuration
    /// \return size of configuration
    short getConfigSize () raises (Error);

    /// Get size of velocity
    /// \return size of velocity
    short getNumberDof () raises (Error);

    /// \}

    /// \name Joints
    /// \{

    /// Get joint names in the same order as in the configuration
    /// \note anchor joints are not exported.
    Names_t getJointNames () raises (Error);

    /// Get all joint names including anchor joints
    Names_t getAllJointNames () raises (Error);

    /// Get child joint names excluding anchor joints
    /// This method does not work on anchor joint
    /// \deprecated Use getParentJointName instead
    Names_t getChildJointNames (in string jointName) raises (Error);

    /// Get the parent joint of a joint
    /// \input jointName any joint (anchor or movable).
    /// \return the parent joint (can be an anchor joint)
    string getParentJointName (in string jointName) raises (Error);

    /// Get configuration of a joint in robot configuration
    ///
    /// \param jointName name of the joint,
    /// \return the segment of the robot current configuration correponding to
    ///         the joint.
    floatSeq getJointConfig(in string jointName) raises (Error);

    /// Set configuration of a joint in robot configuration
    ///
    /// \param jointName name of the joint,
    /// \param config Configuration of the joint.
    ///
    /// Size of config should fit hpp::model::Joint::configSize.
    ///
    /// Modify the part of the robot current configuration
    /// correponding to the joint and recompute forward kinematics
    void setJointConfig(in string jointName, in floatSeq config) raises (Error);

    /// Integrate velocity of a joint starting from robot configuration
    ///
    /// \param jointName name of the joint,
    /// \param speed velocity vector of the joint
    ///
    /// Size of speed should fit hpp::model::Joint::numberDof.
    ///
    /// Modify the part of the robot current configuration
    /// correponding to the joint and recompute forward kinematics
    void jointIntegrate(in string jointName, in floatSeq speed) raises (Error);

    /// Get COM position
    /// \throw Error if robot is not set
    floatSeq getComPosition () raises (Error);

    /// Get joint Transformation
    /// \param jointName name of the joint
    /// \throw Error if robot is not set or it joint does not exist.
    floatSeqSeq getCurrentTransformation(in string jointName) raises (Error);

    /// Get joint position
    /// \param jointName name of the joint
    /// \throw Error if robot is not set or if joint does not exist.
    Transform_ getJointPosition (in string jointName) raises (Error);

    /// Get the initial joint position (when config parameter corresponds to the identity)
    /// \param jointName name of the joint
    /// \throw Error if robot is not set or if joint does not exist.
    Transform_ getJointPositionInParentFrame (in string jointName) raises (Error);

    /// Get position of root joint in world frame
    /// \return constant position of the root joint in world frame in
    ///         initial configuration.
    Transform_ getRootJointPosition () raises (Error);

    /// Set position of root joint in world frame
    /// \param position constant position of the root joint in world frame in
    ///        initial configuration.
    void setRootJointPosition (in Transform_ position) raises (Error);

    /// Set the static position of joint WRT its parent
    /// \param position constant position of the joint
    void setJointPositionInParentFrame (in string jointName, in Transform_ position)
      raises (Error);

    /// Get joint number degrees of freedom
    /// \param jointName name of the joint
    /// \throw Error if robot is not set or if joint does not exist.
    short getJointNumberDof (in string jointName) raises (Error);

    /// Get joint number config size
    /// \param jointName name of the joint
    /// \throw Error if robot is not set or if joint does not exist.
    short getJointConfigSize (in string jointName) raises (Error);

    ///  set bounds for a joint

    /// \param jointName name of the joint
    /// \param inJointBound sequence of joint dof bounds in order
    ///        [v0_min,v0_max,v1_min,v1_max,...].
    /// \li If vi_min > vi_max, dof of rank i is not bounded.
    /// \li If size of sequence is different from twice the number of dofs,
    ///     raise error.
    /// \note The roadmap must be reset after all the joints bounds has been set.
    ///       See Problem::resetRoadmap
    void setJointBounds(in string jointName,
			in floatSeq inJointBound)
      raises (Error);

    /// Get bounds for a joint
    ///
    /// \param jointName name of the joint
    /// \return sequence of bounds in order [v0_min,v0_max,v1_min,v1_max,...]
    ///         where vi_min, vi_max are the bounds of the i-th degree of
    ///         freedom of the joint if the degree of freedom is bounded, 1, 0
    ///         otherwise.
    floatSeq getJointBounds(in string jointName) raises (Error);

    /// Get link position in world frame
    ///
    /// Joints are oriented in a different way as in urdf standard since
    /// rotation and uni-dimensional translation joints act around or along
    /// their x-axis. This method returns the current position of the urdf link
    /// in world frame.
    ///
    /// \param jointName name of the joint
    /// \return position of the link in world frame.
    Transform_ getLinkPosition (in string linkName) raises (Error);

    /// Get link names
    ///
    /// \param jointName name of the joint,
    /// \return names of the links.
    Names_t getLinkNames (in string jointName) raises (Error);

    /// \}

    /// \name Extra configuration space
    /// \{

    /// Set dimension of the extra configuration space
    ///
    /// \param dimension dimension
    /// \sa hpp::model::ExtraConfigSpace
    void setDimensionExtraConfigSpace (in unsigned long dimension)
      raises (Error);

    /// Set bounds of extra configuration variables
    /// \param inJointBound sequence of joint dof bounds in order
    ///        [v0_min,v0_max,v1_min,v1_max,...].
    /// \li If vi_min > vi_max, dof of rank i is not bounded.
    /// \li If size of sequence is different from twice the number of dofs,
    ///     raise error.
    void setExtraConfigSpaceBounds (in floatSeq bounds) raises (Error);

    /// \}

    /// \name Configuration
    /// \{

    /// Get current configuration
    /// \return dofArray Array of degrees of freedom.
    floatSeq getCurrentConfig() raises (Error);

    /// Shoot random configuration
    /// \return dofArray Array of degrees of freedom.
    floatSeq shootRandomConfig() raises (Error);

    /// Set current configuration of specified robot,
    /// \param dofArray Array of degrees of freedom /
    void setCurrentConfig(in floatSeq dofArray) raises (Error);

    /// \}

    /// \name Bodies
    /// \{

    ///  Get the list of objects attached to a joint.
    /// \param inJointName name of the joint.
    /// \return list of names of CollisionObject attached to the body.
    Names_t getJointInnerObjects (in string jointName) raises (Error);


    ///  Get list of collision objects tested with the body attached to a joint
    /// \param inJointName name of the joint.
    /// \return list of names of CollisionObject
    Names_t getJointOuterObjects (in string jointName) raises (Error);

    /// Get the position of an object of the robot
    ///
    /// \param objectName name of the object.
    /// \retval cfg Position of the obstacle.
    /// \throw Error.
    void getObjectPosition (in string objectName, out Transform_ cfg)
      raises (Error);

    /// \}

    /// \name Collision checking and distance computation
    /// \{

    /// Test the validity of a configuration
    ///
    /// Check whether current configuration of robot is valid by calling
    /// hpp::core::ConfigValidations object stored in Problem.
    /// \retval validity whether configuration is valid
    /// \retval report the reason why the config is not valid.
    void isConfigValid (in floatSeq dofArray, out boolean validity,
			out string report) raises (Error);


    /// Compute distances between bodies and obstacles
    ///
    /// \retval distances list of distances,
    /// \retval innerObjects names of the objects belonging to a body
    /// \retval outerObjects names of the objects tested with inner objects,
    /// \retval innerPoints closest points on the body,
    /// \retval outerPoints closest points on the obstacles
    /// \note outer objects for a body can also be inner objects of another
    /// body.
    void distancesToCollision (out floatSeq distances,
			       out Names_t innerObjects,
			       out Names_t outerObjects,
			       out floatSeqSeq innerPoints,
			       out floatSeqSeq outerPoints) raises (Error);

    /// Check each auto-collision pair for collision and return the result.
    ///
    /// \retval collide a list of boolean corresponding to the return value of
    ///                 of collisionPairs
    void autocollisionCheck (out boolSeq collide) raises (Error);

    /// Returns the list of auto collision pairs.
    ///
    /// \retval innerObjects names of the objects belonging to a body
    /// \retval outerObjects names of the objects tested with inner objects,
    /// \retval active vector of boolean saying whether a collision pair is active
    void autocollisionPairs (out Names_t innerObjects, out Names_t outerObjects, out boolSeq active) raises (Error);

    void setAutoCollision (in string innerObject, in string outerObject, in boolean active) raises (Error);

    /// Get the aligned axes bounding box around the robot.
    floatSeq getRobotAABB () raises (Error);

    /// \}

    /// \name Mass and inertia
    /// \{

    /// Get mass of robot
    double getMass () raises (Error);

    /// Get position of center of mass
    floatSeq getCenterOfMass () raises (Error);

    /// Get Jacobian of the center of mass
    floatSeqSeq getJacobianCenterOfMass () raises (Error);

    /// \}

    /// \name Create and register robot
    /// \{

//DEPREC    /// Create an empty device and store it temporarily
//DEPREC    /// \param robotName name of the robot.
//DEPREC    ///  Fails if another robot is already in construction.
//DEPREC    void createRobot(in string robotName) raises (Error);
//DEPREC
//DEPREC    // Create a new joint
//DEPREC    // \param jointName name of the joint,
//DEPREC    // \param jointType among ["anchor", "SO3", "bounded-rotation",
//DEPREC    //                         "unbounded-rotation", "translation",
//DEPREC    //                         "translation2", "translation3"]
//DEPREC    // \param pos initial position of the joint
//DEPREC    // \param joinBounds bounds of the joint. See setJointBounds for details.
//DEPREC    // void createJoint(in string jointName, in string jointType,
//DEPREC		     // in Transform_ pos, in floatSeq jointBounds)
//DEPREC      // raises (Error);
//DEPREC
//DEPREC    ///  Add a child joint to a joint.
//DEPREC    /// \param inParentName name of the joint to which a child is added.
//DEPREC    /// \param inChildName name of the child joint added to the previous one.
//DEPREC    /// \throw Error.
//DEPREC    void addJoint(in string inParentName, in string inChildName)
//DEPREC      raises (Error);
//DEPREC
//DEPREC    /// Add a robot to the ProblemSolver
//DEPREC    /// \throw Error.
//DEPREC    void setRobot (in string inRobotName) raises (Error);
//DEPREC
//DEPREC    ///  Set a joint as root joint to a robot.
//DEPREC    /// \param inRobotName name of the robot (ChppDevice).
//DEPREC    /// \param inJointName name of the joint.
//DEPREC    void setRobotRootJoint(in string inRobotName, in string inJointName)
//DEPREC      raises (Error);
//DEPREC
//DEPREC    ///  create an empty polyhedron.
//DEPREC    /// \param inPolyName name of the polyhedron.
//DEPREC    /// \throw Error.
//DEPREC    void createPolyhedron(in string inPolyName) raises (Error);
//DEPREC
//DEPREC    ///  Create a box
//DEPREC    /// \param name name of the box
//DEPREC    /// \param x, y, z Size of the box
//DEPREC    void createBox (in string name, in double x, in double y, in double z)
//DEPREC      raises (Error);
//DEPREC
//DEPREC    ///  Create a sphere
//DEPREC    /// \param name name of the sphere
//DEPREC    /// \param radius radius of the sphere
//DEPREC    void createSphere (in string name, in double radius) raises (Error);
//DEPREC
//DEPREC    ///  Add a point to a polyhedron
//DEPREC    /// \param inPolyName the name of the polyhedron.
//DEPREC    /// \param x coordinate of the point.
//DEPREC    /// \param y coordinate of the point.
//DEPREC    /// \param z coordinate of the point.
//DEPREC    /// \return rank of point in polyhedron
//DEPREC    short addPoint(in string inPolyName, in double x, in double y, in double z)
//DEPREC      raises (Error);
//DEPREC
//DEPREC    ///  Add a point to a polyhedron
//DEPREC    /// \param inPolyName the name of the polyhedron.
//DEPREC    /// \param pt1 rank of first point in polyhedron.
//DEPREC    /// \param pt2 rank of second point in polyhedron.
//DEPREC    /// \param pt3 rank of third point in polyhedron.
//DEPREC    /// \return rank of triangle in polyhedron
//DEPREC    short addTriangle(in string inPolyName, in unsigned long pt1,
//DEPREC		      in unsigned long pt2, in unsigned long pt3)
//DEPREC      raises (Error);
//DEPREC
//DEPREC    ///  Attach an object to a joint.
//DEPREC    /// \param jointName name of the body
//DEPREC    /// \param objectName name of the object
//DEPREC    /// \param pos relative position of the polyhedron in the body
//DEPREC    void addObjectToJoint(in string jointName, in string objectName,
//DEPREC			  in Transform_ pos) raises (Error);

    /// Add an object to compute a partial COM of the robot.
    /// \param name of the partial com
    /// \param jointNames names of each ROOT of the joint trees to consider.
    /// \note Joints are added recursively, it is not possible so far to add a
    /// joint without addind all its children.
    void addPartialCom (in string comName, in Names_t jointNames)
        raises (Error);

    /// Get position of partial center of mass
    floatSeq getPartialCom (in string comName) raises (Error);

    /// Get Jacobian of the partial center of mass
    floatSeqSeq getJacobianPartialCom (in string comName) raises (Error);

    /// Get the name of the current robot.
    string getRobotName () raises (Error);
    /// \}
  };
  };
};

#endif // HPP_CORBASERVER_ROBOT_SERVER_IDL
