// Copyright (C) 2009, 2010 by Florent Lamiraux, Thomas Moulard, JRL.
//
// This file is part of the hpp-corbaserver.
//
// This software is provided "as is" without warranty of any kind,
// either expressed or implied, including but not limited to the
// implied warranties of fitness for a particular purpose.
//
// See the COPYING file for more information.

#ifndef HPP_CORBASERVER_OPENHRP_IMPL_HH
# define HPP_CORBASERVER_OPENHRP_IMPL_HH
# include <cstdlib>
# include <map>
# include <vector>
# include <string>

# include <hpp/corbaserver/fwd.hh>
# include <hpp/corbaserver/config.hh>
# include <hpp/core/planner.hh>
# include <hpp/model/humanoid-robot.hh>

namespace hpp
{
  namespace corbaServer
  {
    namespace impl
    {
      /// \brief OpenHRP client to load HRP2 model.
      class HPP_CORBASERVER_DLLAPI OpenHRP
      {
	friend class InternalCorbaObject;
      public:
	explicit OpenHRP(core::Planner* hpp);

	/// \brief Destroy joint absolute position matrices in associative array.
	~OpenHRP ();

	/// \brief Build an instance of HRP2 by using Robotbuilder::Robotbuilder
	///
	/// \param inPenetration Dynamic penetration allowed for validating direct paths of the robot.
	/// \param inModel optional path to the file describing the robot.
	///
	/// This function an instance of HRP2 by calling Robotbuilder::makeRobot()
	/// and initializes a ChppProblem with this robot by calling
	/// core::Planner::addHppProblem(CkppDeviceComponentShPtr robot).
	/// Note that the robot is set into half-sitting configuration.
	ktStatus loadHrp2Model
	(double inPenetration, const std::string& inModel =
	 std::string("@OPENHRP_PREFIX@/Controller/IOserver/robot/HRP2JRL/model/HRP2JRLmain.wrl"));

	/// \brief  Build an instance of HRP2 by using Robotbuilder::Robotbuilder
	///
	/// \param inModel optional path to the file describing the robot.
	///
	/// \retval outDevice The model of HRP2 set in half-sitting position.
	///
	/// Note that the robot is set into half-sitting configuration.
	ktStatus loadHrp2Model
	(model::HumanoidRobotShPtr &outDevice,
	 const std::string& inModel =
	 std::string("@OPENHRP_PREFIX@/Controller/IOserver/robot/HRP2JRL/model/HRP2JRLmain.wrl"));

	/// \brief  Initialize Orb and load model of a robot by sending a Corba request modelLoader to OpenHRP.
	/// \param inFilename Name of the wrl file containing the description of the robot.
	/// \param inDeviceName Name of the device
	/// \param inDirectory Prefix of OpenHRP installation. Default value is provided by hppOpenHRP package.
	/// \retval outDevice The model of robot.
	///
	/// \note The model of the robot is downloaded from "file://"inDirectory/inFileName".
	/// \warning the way the arguments are handled has changed: "etc/" is not anymore inserted in the model path.
	ktStatus
	loadRobotModel (const std::string& inFilename,
			const std::string& inDeviceName,
			model::DeviceShPtr& outDevice,
			const std::string& inDirectory=
			std::string("@OPENHRP_PREFIX@")+std::string("/etc"));

	/// \brief Initialize Orb and load model of objects by sending a Corba request modelLoader to OpenHRP.
	/// \param inFilename Name of the wrl file containing the description of the obstacle.
	/// \param inObstacleName Name of the obstacle.
	/// \param inDirectory Prefix of OpenHRP installation. Default value is provided by hppOpenHRP package.
	/// \retval outPolyhedron shared pointer to the polyhedron.
	///
	/// \note The model of the obstacle is downloaded from "file://"inDirectory/inFileName"
	/// \warning the way the arguments are handled has changed: "etc/" is not anymore inserted in the model path.
	ktStatus
	loadObstacleModel (const std::string& inFilename,
			   const std::string& inObstacleName,
			   CkppKCDPolyhedronShPtr& outPolyhedron,
			   const std::string& inDirectory=
			   std::string("@OPENHRP_PREFIX@")+std::string("/etc/"));

	/// \brief return the pointer to planner.
	core::Planner* planner ()
	{
	  return hppPlanner;
	}

      private:

	/// \brief Get URL of robot for loadRobotModel function.
	///
	/// \param inModel Path to the model of HRP2 robot.
	ktStatus getRobotURL (const std::string& inModel);

	/// \brief Get URL of obstacle for loadObstacleModel function.
	ktStatus getObstacleURL (const std::string& inFilename);

	/// \brief Pointer to Path Planner object allocated elsewhere.
	core::Planner* hppPlanner;

	InternalCorbaObject* privateCorbaObject ;
      };
    } // end of namespace impl.
  } // end of namespace corbaServer.
} // end of namespace hpp.

#endif //! HPP_CORBASERVER_OPENHRP_IMPL_HH
